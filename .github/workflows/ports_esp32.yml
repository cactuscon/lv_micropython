name: esp32 port

on:
  push:
    branches: [main]
  pull_request:
    paths:
      - '.github/workflows/*.yml'
      - 'tools/**'
      - 'py/**'
      - 'extmod/**'
      - 'shared/**'
      - 'lib/**'
      - 'drivers/**'
      - 'ports/esp32/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write  # Required for creating releases/tags

jobs:

  validate_version_tag:
    if: (startsWith(github.head_ref, 'release/')) || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.extract_version.outputs.VERSION }} 
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true

      - name: Extract version from PR branch or merge commit
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Event is pull_request"
            BRANCH_NAME="${{ github.head_ref }}"
            VERSION="${BRANCH_NAME#release/}"
          elif [ "${{ github.event_name }}" = "push" ]; then
            echo "Event is push to main"
            COMMIT_MSG=$(git log -1 --pretty=%B)
            echo "Commit message: $COMMIT_MSG"

            VERSION=$(echo "$COMMIT_MSG" | grep -oE 'release/v[0-9]+\.[0-9]+\.[0-9]+$' | cut -d/ -f2)
          else
            echo "::error::Unsupported event context"
          fi

          if [ -z "$VERSION" ]; then
            echo "::error::Failed to extract version from branch or commit"
            VERSION="untagged"
          fi

          # remove whitespace and newlines
          VERSION=$(echo -n "$VERSION" | tr -d '[:space:]' | tr -d '\n')
          
          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

  build_idf:
    needs: validate_version_tag
    strategy:
      fail-fast: false
      matrix:
        ci_func:  # names are functions in ci.sh
          - esp32_build_s3_lvgl
    runs-on: ubuntu-22.04
    env:
      VERSION: ${{ needs.validate_version_tag.outputs.VERSION }}
      BOARD: ESP32_GENERIC_S3_LVGL

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - id: idf_ver
      name: Read the ESP-IDF version
      run: source tools/ci.sh && echo "IDF_VER=$IDF_VER" | tee "$GITHUB_OUTPUT"

    - name: Cached ESP-IDF install
      id: cache_esp_idf
      uses: actions/cache@v4
      with:
        path: |
          ./esp-idf/
          ~/.espressif/
          !~/.espressif/dist/
          ~/.cache/pip/
        key: esp-idf-${{ steps.idf_ver.outputs.IDF_VER }}

    - name: Install ESP-IDF packages
      if: steps.cache_esp_idf.outputs.cache-hit != 'true'
      run: source tools/ci.sh && ci_esp32_idf_setup

    - name: Restore submodules
      id: cache_submodules
      uses: actions/cache/restore@v4
      with:
        path: |
          .git/modules/lib/
          .git/modules/user_modules/
          user_modules/lv_binding_micropython
          lib/
        key: mpy-submodules-${{ hashFiles('.gitmodules') }}

    - name: Setup submodules
      if: steps.cache_submodules.outputs.cache-hit != 'true'
      run: |
        git submodule update --init --recursive user_modules/lv_binding_micropython
        git submodule update --init --recursive lib/

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: esp32-${{ matrix.ci_func }}

    - name: Build ci_${{matrix.ci_func }}
      run: source tools/ci.sh && ci_${{ matrix.ci_func }}

    - name: Cache Submodules
      uses: actions/cache/save/@v4
      with:
        path: |
          .git/modules/lib/
          .git/modules/user_modules/
          user_modules/lv_binding_micropython
          lib/
        key: ${{ steps.cache_submodules.outputs.cache-primary-key }}

    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v4
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.validate_version_tag.outputs.VERSION != 'untagged'
      with:
        name: firmware
        path: |
          ports/esp32/build-ESP32_GENERIC_S3_LVGL/bootloader/bootloader.bin
          ports/esp32/build-ESP32_GENERIC_S3_LVGL/partition_table/partition-table.bin
          ports/esp32/build-ESP32_GENERIC_S3_LVGL/micropython.bin
        retention-days: 1
        if-no-files-found: error 

  release_artifact:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.validate_version_tag.outputs.VERSION != 'untagged'
    needs: [validate_version_tag, build_idf]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true

      - uses: actions/download-artifact@v4
        with:
          name: firmware
          path: firmware_files  # download into subfolder for clarity

      - name: List downloaded firmware
        run: ls -R firmware_files

      - name: Create GitHub release from tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.validate_version_tag.outputs.VERSION }}
        run: |
          gh release create "$VERSION" \
            firmware_files/bootloader/bootloader.bin \
            firmware_files/partition_table/partition-table.bin \
            firmware_files/micropython.bin \
            --title "ESP32-S3 MicroPython LVGL" \
            --notes "Automated release for ESP32-S3 firmware\n\nLoad firmware with:\n```bash\npython -m esptool --chip esp32s3 -b 460800 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_size 8MB --flash_freq 80m 0x0 bootloader.bin 0x8000 partition-table.bin 0x10000 micropython.bin` \n"

